import datetime
import os
import sys
import time
import json
import random
import threading
import requests
import urllib.request
from urllib.parse import urlparse, parse_qs
import socket
import os, psutil
import platform
import re # Th√™m th∆∞ vi·ªán regex
import os, psutil
import platform
import re # Th√™m th∆∞ vi·ªán regex

# --- X·ª≠ l√Ω t∆∞∆°ng th√≠ch Curl Cffi ---
try:
    if 'android' in platform.system().lower() or 'termux' in platform.release().lower():
        raise ImportError("Kh√¥ng d√πng curl_cffi tr√™n Termux")
    from curl_cffi import requests as cffi_requests  # Th∆∞ vi·ªán Curl Cffi (cho Mode 4)
    CFFI_AVAILABLE = True
except Exception:
    import requests as cffi_requests
    CFFI_AVAILABLE = False
    
# Th∆∞ vi·ªán requests ti√™u chu·∫©n (d√πng cho API b√™n ngo√†i v√† fallback)
import requests as standard_requests

# --- C·∫•u h√¨nh M√£ M√†u ANSI ---
YELLOW  = "\033[33m"
BLUE    = "\033[34m"
MAGENTA = "\033[35m"
RESET   = "\033[0m"
RED     = "\033[31m"
GREEN   = "\033[32m"
CYAN    = "\033[36m"
WHITE   = "\033[37m" 
BOLD    = "\033[1m"
BRIGHT_RED     = "\033[91m"

# Regex ƒë·ªÉ lo·∫°i b·ªè m√£ m√†u ANSI
ANSI_ESCAPE = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')

# --- H·∫±ng s·ªë File ---
AUTH_FILE = "Authorization.txt"
COOKIES_FILE = "Cookies_IG.txt"
CONFIG_FILE = "config.json" # Th√™m Config file
STATE_FILE = "state.json" # Th√™m State file
LOG_FILE = "log.txt" # Th√™m Log file
DEFAULT_IP = "ƒêang ki·ªÉm tra..." 

# --- Bi·∫øn to√†n c·ª•c ---
HTTP_MODE_CHOICE = 4 
PUBLIC_IP = "ƒêang ki·ªÉm tra..." # Bi·∫øn m·ªõi l∆∞u IP Public

# --- H·∫±ng s·ªë Banner Text ---
BANNER_TEXT = fr"""{CYAN}
    ____  __  __________  ___    _   _____   ____ _____{YELLOW}
   / __ \/ / /_  __/ __ \/   |  / | / /__ \ / __ \__  / üîπ
  / /_/ / /   / / / /_/ / /| | /  |/ /__/ // / / //_ <  {GREEN}üîπ {BOLD}{GREEN}TOOL AUTO 
 / ____/ /___/ / / _, _/ ___ |/ /|  // __// /_/ /__/ / {GREEN}üîπ Version : 2.0
/_/   /_____/_/ /_/ |_/_/  |_/_/ |_//____/\____/____/  {BLUE}GOLIKE {MAGENTA}INSTAGRAM{RESET}
{BOLD}{CYAN}Telegram: {WHITE}https://t.me/se_meo_bao_an{RESET}üîπ {BLUE}MBBANK{RESET} :{YELLOW}PLTRAN203{RESET}üîπ{RESET} {GREEN}T√äN : {RESET}{BOLD}{CYAN}Phong Tus{RESET}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
{RESET}"""
# --- H√†m X√≥a M√†n H√¨nh ---
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')
    
def clear():
    clear_screen()

# --- H√†m L·∫•y Th·ªùi Gian ---
def get_current_time_str(format_str="%H:%M:%S"):
    tz = datetime.timezone(datetime.timedelta(hours=7))
    now = datetime.datetime.now(tz)
    return now.strftime(format_str)

# --- NEW: H√†m Ghi Log (Lo·∫°i b·ªè m√£ m√†u cho log file) ---
def write_log(message, type="INFO"):
    """Ghi th√¥ng b√°o v√†o console v√† log.txt, lo·∫°i b·ªè m√£ m√†u khi ghi file."""
    timestamp = get_current_time_str(format_str="%Y-%m-%d %H:%M:%S")
    
    # Lo·∫°i b·ªè m√£ m√†u ANSI cho log file
    log_message_no_color = ANSI_ESCAPE.sub('', message)
    log_entry = f"[{timestamp}] [{type}] {log_message_no_color}\n"
    
    # In ra console (gi·ªØ m√†u)
    print(f"{CYAN}[LOG] {message}{RESET}") 
    
    try:
        with open(LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        print(f"{RED}[‚úñ] L·ªói ghi log file: {e}{RESET}")

# --- H√†m Hi·ªÉn Th·ªã Banner ---
def print_animated_banner_char_by_char(text, delay=0.008):
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)

def print_fast_banner(user_info=None):
    print(BANNER_TEXT)
    if user_info and isinstance(user_info, dict):
        print(f"{CYAN}üë§ ID: {user_info.get('id','None')} | T√™n: {user_info.get('name','None')} | üí∞ Xu: {GREEN}{user_info.get('coin','None')}{RESET}\n")

def banner(user_info=None):
    clear_screen()
    print_animated_banner_char_by_char(BANNER_TEXT, delay=0.008) 
    if user_info and isinstance(user_info, dict):
        print(f"{CYAN}üë§ ID: {user_info.get('id','None')} | T√™n: {user_info.get('name','None')} | üí∞ Xu: {GREEN}{user_info.get('coin','None')}{RESET}\n")

# --- NEW: H√†m l·∫•y IP c√¥ng c·ªông th·ª±c t·∫ø ---
def get_real_public_ip():
    """L·∫•y IP Public c·ªßa m√°y t√≠nh b·∫±ng c√°ch g·ªçi API b√™n ngo√†i."""
    try:
        write_log("ƒêang l·∫•y IP Public...", "SETUP")
        # S·ª≠ d·ª•ng standard_requests cho API b√™n ngo√†i
        response = standard_requests.get('https://api.ipify.org', timeout=5)
        if response.status_code == 200:
            return response.text.strip()
    except Exception as e:
        write_log(f"Kh√¥ng th·ªÉ l·∫•y IP Public: {e}", "ERROR")
    return "Kh√¥ng th·ªÉ l·∫•y IP"

# --- H√†m ch·ªçn session k·∫øt n·ªëi (Gi·ªØ nguy√™n logic) ---
def get_http_session(is_ig_request=False):
    """Ch·ªçn v√† tr·∫£ v·ªÅ th∆∞ vi·ªán HTTP Request d·ª±a tr√™n HTTP_MODE_CHOICE."""
    global HTTP_MODE_CHOICE
    
    session = None
    
    if HTTP_MODE_CHOICE == 4 and CFFI_AVAILABLE:
        try:
            session = cffi_requests.Session(impersonate="chrome120")
        except Exception:
            session = standard_requests.Session()
    else:
        session = standard_requests.Session()

    return session

# --- H√†m X·ª≠ l√Ω File ƒë·ªçc/ghi nhi·ªÅu d√≤ng (Th√™m x·ª≠ l√Ω file STATE/CONFIG) ---
def read_or_prompt_multi_line_file(filename, item_name):
    items = []
    
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                items = [line.strip() for line in f if line.strip()]
        except Exception as e:
            print(f"{RED}[‚úñ] Kh√¥ng th·ªÉ ƒë·ªçc file {filename}! L·ªói: {e}{RESET}")
            exit(1)
            
    if not items:
        # N·∫øu l√† file State ho·∫∑c Config, kh√¥ng c·∫ßn nh·∫≠p th·ªß c√¥ng
        if filename in (STATE_FILE, CONFIG_FILE):
            return []
            
        while True:
            print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Vui l√≤ng nh·∫≠p danh s√°ch {item_name} (m·ªói {item_name} tr√™n m·ªôt d√≤ng). Nh·∫≠p 'END' khi ho√†n t·∫•t:{RESET}")
            temp_items = []
            
            while True:
                line = input(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {item_name} #{len(temp_items) + 1}: ").strip()
                if line.lower() == 'end':
                    break
                if line:
                    temp_items.append(line)
                
            if temp_items:
                items = temp_items
                try:
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write('\n'.join(items) + '\n')
                    print(f"{GREEN}[‚úî] ƒê√£ l∆∞u {len(items)} {item_name} v√†o {filename}.{RESET}")
                    break
                except Exception as e:
                    print(f"{RED}[‚úñ] Kh√¥ng th·ªÉ ghi v√†o file {filename}! L·ªói: {e}{RESET}")
                    exit(1)
            else:
                print(f"{RED}Danh s√°ch {item_name} kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!{RESET}")
                
    return items

# --- H√†m T√πy ch·ªçn (X√≥a File) ---
def handle_file_choice(filename, file_type):
    if not os.path.exists(filename):
        return
        
    while True:
        print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Nh·∫≠p 1 ƒë·ªÉ s·ª≠ d·ª•ng {file_type} c≈© ({os.path.basename(filename)}){RESET}")
        print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}Nh·∫≠p 2 ƒê·ªÉ X√≥a {file_type} Hi·ªán T·∫°i{RESET}")
        try:
            choice = input(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Nh·∫≠p L·ª±a Ch·ªçn (1 ho·∫∑c 2): {RESET}").strip()
            if choice == '1':
                return
            elif choice == '2':
                try:
                    os.remove(filename)
                    print(f"{GREEN}[‚úî] ƒê√£ x√≥a {filename}!{RESET}")
                except OSError as e:
                    print(f"{RED}[‚úñ] Kh√¥ng th·ªÉ x√≥a {filename}! L·ªói: {e.strerror}{RESET}")
                if filename not in (CONFIG_FILE, STATE_FILE):
                     print(f"{YELLOW}üëâ Vui l√≤ng nh·∫≠p l·∫°i th√¥ng tin {file_type}!{RESET}")
                return
            else:
                print(f"{RED}\n‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! H√£y nh·∫≠p l·∫°i (1 ho·∫∑c 2).{RESET}")
        except ValueError:
            print(f"{RED}Sai ƒë·ªãnh d·∫°ng! Vui l√≤ng nh·∫≠p s·ªë.{RESET}")

# --- NEW: C√°c H√†m X·ª≠ l√Ω CONFIG/STATE ---

def save_config(delay, lannhan, doiacc_limit, lam): 
    """L∆∞u c·∫•u h√¨nh ch·∫°y v√†o config.json."""
    config = {
        "delay": delay,
        "lannhan": lannhan,
        "doiacc_limit": doiacc_limit,
        "lam": lam,
        "http_mode": HTTP_MODE_CHOICE
    }
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4)
        write_log(f"ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {CONFIG_FILE}.", "CONFIG")
    except Exception as e:
        write_log(f"L·ªói khi l∆∞u c·∫•u h√¨nh: {e}", "ERROR")

def load_config():
    """T·∫£i c·∫•u h√¨nh ch·∫°y t·ª´ config.json."""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                write_log(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {CONFIG_FILE}.", "CONFIG")
                return config
        except Exception as e:
            write_log(f"L·ªói khi t·∫£i c·∫•u h√¨nh, s·∫Ω y√™u c·∫ßu nh·∫≠p l·∫°i: {e}", "ERROR")
    return {}

def save_state(profiles):
    """L∆∞u tr·∫°ng th√°i c·ªßa c√°c profiles v√†o state.json."""
    state_data = {}
    for p in profiles:
        state_data[p['username']] = {
            'success_count': p['success_count'],
            'fail_count': p['fail_count'],
            'total_earn': p['total_earn']
        }
    try:
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state_data, f, indent=4)
        write_log(f"ƒê√£ l∆∞u tr·∫°ng th√°i c·ªßa {len(profiles)} profiles v√†o {STATE_FILE}.", "STATE")
    except Exception as e:
        write_log(f"L·ªói khi l∆∞u tr·∫°ng th√°i: {e}", "ERROR")

def load_state(profiles):
    """T·∫£i tr·∫°ng th√°i t·ª´ state.json v√† √°p d·ª•ng cho c√°c profiles."""
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                state_data = json.load(f)
                loaded_count = 0
                for p in profiles:
                    state = state_data.get(p['username'])
                    if state:
                        p['success_count'] = state.get('success_count', 0)
                        p['fail_count'] = state.get('fail_count', 0)
                        p['total_earn'] = state.get('total_earn', 0.0)
                        loaded_count += 1
                write_log(f"ƒê√£ t·∫£i tr·∫°ng th√°i cho {loaded_count} profiles t·ª´ {STATE_FILE}.", "STATE")
        except Exception as e:
            write_log(f"L·ªói khi t·∫£i tr·∫°ng th√°i: {e}. S·∫Ω ch·∫°y l·∫°i t·ª´ ƒë·∫ßu.", "ERROR")
    return profiles

# --- C√°c H√†m X·ª≠ l√Ω API (S·ª≠ d·ª•ng session ƒë·ªông) ---

def get_golike_headers(author_token):
    return {
        'Accept-Language': 'vi,en-US;q=0.9,en;q=0.8',
        'Referer': 'https://app.golike.net/',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-site',
        'T': 'VFZSak1FMTZZM3BOZWtFd1RtYzlQUT09',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36',
        "Authorization": author_token,
        'Content-Type': 'application/json;charset=utf-8'
    }

# S·ª≠ d·ª•ng logic retry cho Golike API ƒë·ªÉ tƒÉng ·ªïn ƒë·ªãnh
def call_golike_api(url, method, author_token, params=None, json_data=None):
    golike_headers = get_golike_headers(author_token)
    session = get_http_session(is_ig_request=False) 
    
    for attempt in range(1, 4): # Th·ª≠ l·∫°i t·ªëi ƒëa 3 l·∫ßn
        try:
            if method == 'GET':
                response = session.get(url, headers=golike_headers, params=params, timeout=10)
            else:
                response = session.post(url, headers=golike_headers, json=json_data, timeout=15)
            
            if response.status_code == 429:
                write_log(f"API Golike b√°o Qu√° t·∫£i (429). ƒêang ch·ªù 30s... (L·∫ßn {attempt})", "WARNING")
                time.sleep(30)
                continue
            
            if not response.text:
                return {"status": 500, "message": "Ph·∫£n h·ªìi r·ªóng (L·ªói k·∫øt n·ªëi?)"}
                 
            try:
                data = response.json()
                if data.get("status") != 200 and "rate limit" in data.get("message", "").lower():
                     write_log(f"Golike b√°o Rate Limit. ƒêang ch·ªù 30s... (L·∫ßn {attempt})", "WARNING")
                     time.sleep(30)
                     continue
                return data
            except json.JSONDecodeError:
                if response.text.startswith('<!DOCTYPE html>'):
                     write_log("B·ªã ch·∫∑n b·ªüi Golike/Firewall (Ph·∫£n h·ªìi l√† HTML)", "ERROR")
                     return {"status": 500, "message": "B·ªã ch·∫∑n b·ªüi Golike/Firewall."}
                return {"status": 500, "message": f"L·ªói Decode JSON API."}
                
        except standard_requests.exceptions.RequestException as e:
            write_log(f"L·ªói k·∫øt n·ªëi API: {e}. Th·ª≠ l·∫°i sau 10s... (L·∫ßn {attempt})", "WARNING")
            time.sleep(10)
        except Exception as e:
            return {"status": 500, "message": f"L·ªói chung khi g·ªçi API: {e}"}
            
    return {"status": 500, "message": "Th·∫•t b·∫°i sau nhi·ªÅu l·∫ßn th·ª≠ g·ªçi API."}


def chonacc(author_token):
    return call_golike_api('https://gateway.golike.net/api/instagram-account', 'GET', author_token)

def nhannv(account_id, author_token):
    params = {'instagram_account_id': account_id, 'data': 'null'}
    return call_golike_api('https://gateway.golike.net/api/advertising/publishers/instagram/jobs', 'GET', author_token, params=params)

def hoanthanh(ads_id, account_id, author_token):
    json_data = {
        'instagram_users_advertising_id': ads_id,
        'instagram_account_id': account_id,
        'async': True,
        'data': None
    }
    return call_golike_api('https://gateway.golike.net/api/advertising/publishers/instagram/complete-jobs', 'POST', author_token, json_data=json_data)

def baoloi(ads_id, object_id, account_id, loai, author_token):
    session = get_http_session(is_ig_request=False)
    golike_headers = get_golike_headers(author_token)
    try:
        # B√°o l·ªói
        url_report = 'https://gateway.golike.net/api/report/send'
        json_data_report = {
            'description': 'T√¥i ƒë√£ l√†m Job n√†y r·ªìi',
            'users_advertising_id': ads_id,
            'type': 'ads',
            'provider': 'instagram',
            'fb_id': account_id,
            'error_type': 6
        }
        session.post(url_report, headers=golike_headers, json=json_data_report, timeout=5)
        
        # Skip job
        url_skip = 'https://gateway.golike.net/api/advertising/publishers/instagram/skip-jobs'
        json_data_skip = {
            'ads_id': ads_id,
            'object_id': object_id,
            'account_id': account_id,
            'type': loai
        }
        session.post(url_skip, headers=golike_headers, json=json_data_skip, timeout=5)
    except standard_requests.exceptions.RequestException:
        write_log(f"L·ªói k·∫øt n·ªëi khi g·ª≠i b√°o l·ªói/skip job {ads_id}.", "WARNING")
    except Exception:
        pass
    return None

# --- C√°c H√†m T∆∞∆°ng t√°c v·ªõi Instagram ---
def get_ig_headers(cookies, link=None):
    """X√¢y d·ª±ng headers cho c√°c request Instagram, tr√≠ch xu·∫•t CSRF token t·ª´ cookies."""
    token = None
    if 'csrftoken' in cookies:
        for cookie in cookies.split(';'):
            if 'csrftoken=' in cookie:
                token = cookie.split('csrftoken=')[1].split(';')[0].strip()
                break

    headers = {
        'Accept': '*/*',
        'Accept-Language': 'vi,en-US;q=0.9,en;q=0.8',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': cookies,
        'Origin': 'https://www.instagram.com',
        'Referer': link if link else 'https://www.instagram.com/',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36',
        'X-Asbd-Id': '198387',
        'X-Csrftoken': token if token else '',
        'X-Ig-App-Id': '936619743392459',
        'X-Ig-Www-Claim': 'hmac.AR1UYU8O8XCMl4jZdv4YxiRUxEIymCA_4stpgFmc092K1Kb2',
        'X-Instagram-Ajax': '1006309104',
    }
    return headers

def handle_follow_job(cookies, object_id):
    """Th·ª±c hi·ªán h√†nh ƒë·ªông Follow tr√™n Instagram. Tr·∫£ v·ªÅ True/False/"400"."""
    session = get_http_session(is_ig_request=True) 
    url = f"https://i.instagram.com/api/v1/web/friendships/{object_id}/follow/"
    headers = get_ig_headers(cookies, link=f'https://www.instagram.com/web/friendships/{object_id}/follow/')
    
    try:
        response = session.post(url, headers=headers, timeout=10)
        
        if response.status_code == 400:
            return "400" 
        
        response.raise_for_status() 
        
        response_data = response.json()
        if response_data.get('status') == 'ok' or response_data.get('following') is True:
            return True
        else:
            return False

    except standard_requests.exceptions.HTTPError:
        return False
        
    except standard_requests.exceptions.RequestException:
        return False
        
    except json.JSONDecodeError:
         return False
         
    except Exception:
        return False

def handle_like_job(cookies, media_id, link):
    """Th·ª±c hi·ªán h√†nh ƒë·ªông Like tr√™n Instagram. Tr·∫£ v·ªÅ True, False, ho·∫∑c "400"."""
    session = get_http_session(is_ig_request=True) 
    url = f"https://www.instagram.com/web/likes/{media_id}/like/"
    headers = get_ig_headers(cookies, link=link)
    
    try:
        response = session.post(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            if '"status":"ok"' in response.text:
                return True
            else:
                return False
        elif response.status_code == 400: 
            if 'Sorry, this photo has been deleted' in response.text:
                return False 
            else:
                return "400" 
        else:
            return False

    except standard_requests.exceptions.RequestException:
        return False
        
    except json.JSONDecodeError:
         return False
         
    except Exception:
        return False

# --- H√†m C·∫•u H√¨nh Multi-Account ---

def dsacc_by_auth(chontk_Instagram_data):
    if not isinstance(chontk_Instagram_data, dict) or chontk_Instagram_data.get("status") != 200:
        error_message = chontk_Instagram_data.get("message", "Authorization sai ho·∫∑c ch∆∞a li√™n k·∫øt t√†i kho·∫£n Instagram!")
        return None, f"\n{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}{error_message}{RESET}"
                
    account_list = chontk_Instagram_data.get("data", [])
    if not account_list:
        return None, f"\n{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n Instagram n√†o ƒë∆∞·ª£c li√™n k·∫øt v·ªõi Authorization n√†y!{RESET}"

    output = []
    output.append(f"{'‚ïê'*50}")
    output.append(f"{WHITE}[{RED}‚ù£{WHITE}]{YELLOW} Danh s√°ch acc Instagram li√™n k·∫øt: ")
    output.append(f"{'‚ïê'*50}")
            
    for i, acc in enumerate(account_list):
        output.append(f"{CYAN}[{i + 1}]{CYAN} ‚úà {WHITE}Username{GREEN}„ä™ :{YELLOW} {acc['instagram_username']} {WHITE}|{RED}„ä™ :{GREEN} ID: {acc['id']}")
            
    output.append(f"{'‚ïê'*50}")
    return account_list, "\n".join(output)

def setup_working_profiles(auth_tokens, cookies_list):
    working_profiles = []
    num_profiles = min(len(auth_tokens), len(cookies_list))
    
    if num_profiles == 0:
        print(f"{RED}Kh√¥ng t√¨m th·∫•y c·∫∑p Authorization v√† Cookies h·ª£p l·ªá n√†o ƒë·ªÉ ch·∫°y!{RESET}")
        return []
    
    print(f"\n{GREEN}‚úÖ ƒê√£ gh√©p c·∫∑p {num_profiles} Authorization v√† Cookies.{RESET}")
    time.sleep(1)

    for i in range(num_profiles):
        auth_token = auth_tokens[i]
        cookies = cookies_list[i]
        
        clear()
        print_fast_banner() 
        print(f"{CYAN}--- C·∫§U H√åNH PROFILE {i + 1}/{num_profiles} ---{RESET}")
        print(f"{CYAN}üîë Authorization: {auth_token[:10]}...{RESET}")
        print(f"{CYAN}üç™ Cookies IG: {cookies[:15]}...{RESET}") 
        
        chontk_Instagram = chonacc(auth_token)
        account_list, display_text = dsacc_by_auth(chontk_Instagram)
        
        print(display_text)
        
        if not account_list:
            write_log(f"Profile {i+1}: B·ªè qua do kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch acc Golike.", "WARNING")
            print(f"{RED}üö´ B·ªè qua Profile {i + 1}. Vui l√≤ng ki·ªÉm tra l·∫°i Authorization/k·∫øt n·ªëi.{RESET}")
            time.sleep(3)
            continue
            
        max_index = len(account_list)

        account_id = None
        current_username = None
        
        while True:
            try:
                choice_index_str = input(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Nh·∫≠p {RED}S·ªê TH·ª® T·ª∞ (1-{max_index}) {GREEN}c·ªßa Acc IG {YELLOW}KH·ªöP V·ªöI COOKIES{GREEN} n√†y: {RESET}").strip()
                
                if not choice_index_str.isdigit():
                    print(f"{RED}Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± (1 ƒë·∫øn {max_index}).{RESET}")
                    continue
                    
                choice_index = int(choice_index_str)
                
                if 1 <= choice_index <= max_index:
                    selected_acc = account_list[choice_index - 1]
                    account_id = selected_acc["id"]
                    current_username = selected_acc["instagram_username"]
                    print(f"{GREEN}‚úî ƒê√£ ch·ªçn t√†i kho·∫£n: {current_username}{RESET}")
                    break
                else:
                    print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}S·ªë th·ª© t·ª± ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 1 ƒë·∫øn {max_index}!{RESET}")

            except Exception:
                print(f"{RED}L·ªói nh·∫≠p li·ªáu! Vui l√≤ng nh·∫≠p l·∫°i.{RESET}")
                pass
                
        working_profiles.append({
            'index': i + 1,
            'auth_token': auth_token,
            'cookies': cookies,
            'account_id': account_id,
            'username': current_username,
            'fail_count': 0,
            'success_count': 0,
            'total_earn': 0.0, 
            'last_run': get_current_time_str(), 
            'status': f"{YELLOW}ƒêang ch·ªù...{RESET}",
            'last_job': "N/A"
        })
        time.sleep(1)

    return working_profiles

# --- H√ÄM V·∫º B·∫¢NG (C·∫≠p nh·∫≠t hi·ªÉn th·ªã IP Public) ---
def draw_table(profiles, current_profile_index, global_fail_limit):
    
    global PUBLIC_IP 

    # 1. C·∫•u h√¨nh c·ªôt v√† ti√™u ƒë·ªÅ
    COLUMNS = [
        ("STT", 5),
        ("USERNAME", 18),
        ("TR·∫†NG TH√ÅI", 10),
        ("LAST RUN", 10),
        ("SUCCESS", 10),
        ("FAIL", 10),
        ("MESSAGE", 30),
    ]
    
    COL_WIDTHS = [c[1] for c in COLUMNS]
    TOTAL_WIDTH = sum(COL_WIDTHS) + len(COLUMNS) + 1 

    SEPARATOR_LINE = f"{MAGENTA}{'‚ïê' * TOTAL_WIDTH}{RESET}"
    HEADER_FORMAT = f"{CYAN}|{{:^{COL_WIDTHS[0]}}}| {{:^{COL_WIDTHS[1]}}}| {{:^{COL_WIDTHS[2]}}}| {{:^{COL_WIDTHS[3]}}}| {{:^{COL_WIDTHS[4]}}}| {{:^{COL_WIDTHS[5]}}}| {{:^{COL_WIDTHS[6]}}}|{RESET}"
    ROW_FORMAT = f"|{{:^{COL_WIDTHS[0]}}}| {{:<{COL_WIDTHS[1]}}}| {{:^{COL_WIDTHS[2]}}}| {{:^{COL_WIDTHS[3]}}}| {{:^{COL_WIDTHS[4]}}}| {{:^{COL_WIDTHS[5]}}}| {{:<{COL_WIDTHS[6]}}}|"
    
    clear() 
    print_fast_banner() 
    
    total_earn_all = sum(p['total_earn'] for p in profiles)
    print(f"{CYAN}--- TH√îNG TIN CHUNG ---{RESET}")
    print(f"{WHITE}üè† IP Public: {PUBLIC_IP} | {GREEN}T·ªïng ACC: {len(profiles)} | üí∞ T·ªîNG XU: {YELLOW}{total_earn_all:.0f}{RESET} xu | {RED}Gi·ªõi h·∫°n Fail: {global_fail_limit}{RESET}") 
    print(SEPARATOR_LINE)
    print(HEADER_FORMAT.format(*[c[0] for c in COLUMNS]))
    print(SEPARATOR_LINE)
    
    # 2. V·∫Ω t·ª´ng h√†ng
    for i, profile in enumerate(profiles):
        
        display_username = profile['username'][:COL_WIDTHS[1]]
        
        status_color = YELLOW
        if "RUNNING" in profile['status'] or "SUCCESS" in profile['status']:
            status_color = GREEN
        elif "FAIL" in profile['status'] or "L·ªñI" in profile['status'] or "IDLE" in profile['status']:
            status_color = RED
            
        # Lo·∫°i b·ªè m√£ m√†u ANSI trong status ƒë·ªÉ t√≠nh chi·ªÅu d√†i
        status_display_raw = ANSI_ESCAPE.sub('', profile['status']).strip()
        status_display = f"{status_color}{status_display_raw[:COL_WIDTHS[2]]}{RESET}"
        
        message_display = profile['last_job'][:COL_WIDTHS[6]] 
        
        success_display = f"{GREEN}{profile['success_count']}{RESET}"
        fail_display = f"{RED}{profile['fail_count']}/{global_fail_limit}{RESET}"
        
        stt_display = f"{profile['index']}"
        if i == current_profile_index:
             stt_display = f"{BOLD}{BRIGHT_RED}>>>{profile['index']}{RESET}"

        row_content = ROW_FORMAT.format(
            stt_display,
            display_username,
            status_display,
            profile['last_run'],
            success_display,
            fail_display,
            message_display
        )
        
        print(row_content)
        print(SEPARATOR_LINE)
        
    sys.stdout.flush()

# --- Logic Ch√≠nh ---

def main():
    global current_profile_index
    global HTTP_MODE_CHOICE
    global PUBLIC_IP 
    
    current_profile_index = 0

    # 0. L·∫•y IP Public v√† Log
    PUBLIC_IP = get_real_public_ip()
    
    # 1. C·∫•u h√¨nh ban ƒë·∫ßu & Nh·∫≠p li·ªáu
    clear_screen()
    banner() 
    
    print(f"{WHITE}[{RED}‚ù£{WHITE}]{WHITE} ƒê·ªãa ch·ªâ Ip{GREEN}  : {GREEN}‚òû{RED}‚ôî {GREEN}{PUBLIC_IP}{RED}‚ôî {WHITE}‚òú")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    # AUTH
    handle_file_choice(AUTH_FILE, "Authorization")
    auth_tokens = read_or_prompt_multi_line_file(AUTH_FILE, "Authorization")

    clear()
    banner()
    print(f"{WHITE}[{RED}‚ù£{WHITE}]{WHITE} ƒê·ªãa ch·ªâ Ip{GREEN}  : {GREEN}‚òû{RED}‚ôî {GREEN}{PUBLIC_IP}{RED}‚ôî {WHITE}‚òú")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    # COOKIES
    handle_file_choice(COOKIES_FILE, "Cookies")
    cookies_list = read_or_prompt_multi_line_file(COOKIES_FILE, "Cookie")
    
    # T·∫£i c·∫•u h√¨nh c≈©
    config = load_config()

    # H√†m nh·∫≠p li·ªáu chung
    def input_setting(key, default_value, prompt, cast_type=int, validation=None):
        value = config.get(key, default_value)
        while True:
            try:
                user_input = input(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}{prompt} {YELLOW}({value} n·∫øu Enter): {RESET}").strip() or str(value)
                
                if cast_type == bool: # X·ª≠ l√Ω boolean/y/n
                     if user_input.lower() in ('y', 'n'):
                         return user_input.lower()
                
                value = cast_type(user_input)
                
                if validation is None or validation(value):
                    return value
                else:
                    print(f"{RED}Gi√° tr·ªã kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.{RESET}")
            except ValueError:
                print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}Sai ƒë·ªãnh d·∫°ng!!! Vui l√≤ng nh·∫≠p s·ªë.{RESET}")

    # C·∫•u h√¨nh HTTP Mode
    # T·∫£i HTTP Mode t·ª´ config n·∫øu c√≥
    if config.get("http_mode") is not None:
         HTTP_MODE_CHOICE = config["http_mode"]
         print(f"{GREEN}[‚úî] ƒê√£ t·∫£i HTTP Mode c≈©: {HTTP_MODE_CHOICE}{RESET}")
         
    def choose_http_mode_v2():
        global HTTP_MODE_CHOICE
        while True:
            choice_type = input(f"{WHITE}[{RED}?{WHITE}] {CYAN}HTTP Mode hi·ªán t·∫°i: {HTTP_MODE_CHOICE}. Nh·∫≠p 1 ƒë·ªÉ s·ª≠ d·ª•ng Mode c≈©, Nh·∫≠p 2 ƒë·ªÉ Ch·ªçn Mode M·ªõi: {RESET}").strip()
            
            if choice_type == '1':
                return
            
            if choice_type == '2':
                # Gi·ªØ nguy√™n logic ch·ªçn mode m·ªõi
                clear()
                print_fast_banner() 
                # ... (Hi·ªÉn th·ªã b·∫£ng ch·ªçn mode, l∆∞·ª£c b·ªè ƒë·ªÉ gi·ªØ code g·ªçn)
                
                print(f"{BOLD}{WHITE}STT | MODE            | INFO                                     {RESET}")
                print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                print(f"4   | {GREEN}Curl Cffi{RESET}       | T·ªëi ∆∞u cho Windows (Bypass t·ªët nh·∫•t - Recommended){RESET}")
                print(f"0   | {YELLOW}requests{RESET}        | Th∆∞ vi·ªán requests (M·∫∑c ƒë·ªãnh, d·ªÖ b·ªã ch·∫∑n)                                  ")
                print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                
                while True:
                    try:
                        new_mode = input(f"{WHITE}[{RED}?{WHITE}] {CYAN}Nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi mode (4 ho·∫∑c 0): {RESET}").strip()
                        if new_mode.isdigit():
                            mode_int = int(new_mode)
                            if mode_int in (0, 4):
                                HTTP_MODE_CHOICE = mode_int
                                print(f"{GREEN}‚úî ƒê√£ ch·ªçn HTTP Mode m·ªõi: {HTTP_MODE_CHOICE}{RESET}")
                                return
                            else:
                                print(f"{RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 0 ho·∫∑c 4.{RESET}")
                        else:
                            print(f"{RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.{RESET}")
                    except ValueError:
                        print(f"{RED}L·ªói nh·∫≠p li·ªáu! Vui l√≤ng nh·∫≠p s·ªë.{RESET}")
            else:
                print(f"{RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2.{RESET}")

    choose_http_mode_v2()

    if len(auth_tokens) != len(cookies_list):
        # ... (logic c·∫£nh b√°o)
        pass


    working_profiles = setup_working_profiles(auth_tokens, cookies_list)
    working_profiles = load_state(working_profiles) # T·∫£i state v√†o profiles
    
    if not working_profiles:
        write_log("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng. ƒê√£ tho√°t.", "CRITICAL")
        print(f"{RED}Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng. ƒê√£ tho√°t.{RESET}")
        exit(1)
        
    clear()
    print_fast_banner() 

    # 2. Nh·∫≠n c√°c c·∫•u h√¨nh ch·∫°y c√≤n l·∫°i (d√πng gi√° tr·ªã t·ª´ config ho·∫∑c nh·∫≠p l·∫°i)
    delay = input_setting('delay', 0, "Nh·∫≠p th·ªùi gian l√†m job (gi√¢y)", cast_type=int, validation=lambda x: x >= 0)
    lannhan = input_setting('lannhan', 'n', "Nh·∫≠n ti·ªÅn l·∫ßn 2 n·∫øu l·∫ßn 1 fail? (y/n)", cast_type=bool, validation=lambda x: x in ('y', 'n'))
    doiacc_limit = input_setting('doiacc_limit', 3, "S·ªë job fail li√™n ti·∫øp ƒë·ªÉ CHUY·ªÇN ACC TI·∫æP THEO (>=1)", cast_type=int, validation=lambda x: x >= 1)
    
    # Ch·∫ø ƒë·ªô l√†m
    lam = config.get('lam', [])
    if not lam:
        while True:
            # ... (logic ch·ªçn ch·∫ø ƒë·ªô l√†m)
            print(f"{'‚ïê'*50}")
            print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Nh·∫≠p 1 : {YELLOW}Ch·ªâ nh·∫≠n nhi·ªám v·ª• Follow")
            print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Nh·∫≠p 2 : {YELLOW}Ch·ªâ nh·∫≠n nhi·ªám v·ª• like")
            print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {GREEN}Nh·∫≠p 12 : {YELLOW}K·∫øt h·ª£p c·∫£ Like v√† Follow")
            print(f"{'‚ïê'*50}")
            
            try:
                chedo = input(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {BLUE}Ch·ªçn l·ª±a ch·ªçn: {RESET}").strip()
                if chedo in ("1", "2", "12"):
                    if chedo == "1": lam = ["follow"]
                    elif chedo == "2": lam = ["like"]
                    elif chedo == "12": lam = ["follow", "like"]
                    break
                else:
                    print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}Ch·ªâ ƒë∆∞·ª£c nh·∫≠p 1, 2 ho·∫∑c 12!{RESET}")
            except ValueError:
                print(f"{WHITE}[{RED}‚ù£{WHITE}] {CYAN}‚úà {RED}Nh·∫≠p v√†o 1 s·ªë!!!{RESET}")
    else:
        print(f"{GREEN}[‚úî] ƒê√£ t·∫£i Ch·∫ø ƒë·ªô l√†m c≈©: {', '.join(lam).upper()}{RESET}")

    # L∆∞u c·∫•u h√¨nh sau khi ho√†n t·∫•t nh·∫≠p
    save_config(delay, lannhan, doiacc_limit, lam) 

    # 3. V√≤ng l·∫∑p ch·∫°y ch√≠nh 
    current_profile_index = 0
    num_profiles = len(working_profiles)
    
    try: 
        while True:
            # ... (Logic ch·∫°y job t∆∞∆°ng t·ª± nh∆∞ tr∆∞·ªõc)
            current_profile = working_profiles[current_profile_index]
            auth_token = current_profile['auth_token']
            cookies = current_profile['cookies']
            account_id = current_profile['account_id']
            current_username = current_profile['username']
            
            # 1. Ki·ªÉm tra Gi·ªõi h·∫°n Fail
            if current_profile['fail_count'] >= doiacc_limit:
                current_profile['status'] = f"{RED}FAIL (Limit){RESET}"
                current_profile['last_job'] = "Fail li√™n ti·∫øp. Chuy·ªÉn acc..."
                draw_table(working_profiles, current_profile_index, doiacc_limit)
                write_log(f"ACC {current_username}: ƒê·∫°t gi·ªõi h·∫°n fail ({current_profile['fail_count']}/{doiacc_limit}). T·ª± ƒë·ªông chuy·ªÉn acc.", "WARNING")
                time.sleep(3)
                current_profile['fail_count'] = 0
                current_profile_index = (current_profile_index + 1) % num_profiles
                save_state(working_profiles) 
                continue 

            current_profile['status'] = f"{GREEN}RUNNING (T√¨m job){RESET}"
            current_profile['last_job'] = "ƒêang t√¨m nhi·ªám v·ª•..."
            draw_table(working_profiles, current_profile_index, doiacc_limit)
            write_log(f"ACC {current_username}: B·∫Øt ƒë·∫ßu t√¨m nhi·ªám v·ª•. (T·ªïng Xu: {current_profile['total_earn']:.0f})", "INFO")

            # 2. T√¨m Nhi·ªám v·ª•
            job_found = False
            nhanjob = None
            
            for _ in range(3): 
                nhanjob = nhannv(account_id, auth_token)
                
                if not isinstance(nhanjob, dict) or nhanjob.get("status") != 200:
                    current_profile['fail_count'] += 1
                    current_profile['status'] = f"{RED}L·ªñI API{RESET}"
                    current_profile['last_job'] = nhanjob.get('message', 'Kh√¥ng r√µ')[:30]
                    draw_table(working_profiles, current_profile_index, doiacc_limit)
                    write_log(f"ACC {current_username}: L·ªói API Golike khi nh·∫≠n job. Message: {current_profile['last_job']}", "ERROR")
                    time.sleep(3)
                    break 
                
                if nhanjob.get("data"):
                     job_found = True
                     break
                else:
                    current_profile['status'] = f"{YELLOW}IDLE (H·∫øt job){RESET}"
                    current_profile['last_job'] = "H·∫øt nhi·ªám v·ª•. Ch·ªù 10s"
                    draw_table(working_profiles, current_profile_index, doiacc_limit)
                    write_log(f"ACC {current_username}: H·∫øt nhi·ªám v·ª•. Chuy·ªÉn acc sau 10s.", "INFO")
                    time.sleep(10)
                    current_profile_index = (current_profile_index + 1) % num_profiles
                    break 

            if not job_found:
                 # Chuy·ªÉn acc n·∫øu h·∫øt job ho·∫∑c l·ªói API sau 3 l·∫ßn retry
                 if current_profile_index != (current_profile_index + 1) % num_profiles:
                     current_profile_index = (current_profile_index + 1) % num_profiles
                     continue
                 else:
                     # Ch·ªâ c√≥ 1 acc, v·∫´n ti·∫øp t·ª•c v√≤ng l·∫∑p t√¨m job
                     time.sleep(5)
                     continue


            # 3. Th·ª±c hi·ªán Job v√† Nh·∫≠n ti·ªÅn (S·ª≠ d·ª•ng logic c≈©)
            job_data = nhanjob["data"]
            ads_id = job_data["id"]
            link = job_data["link"]
            object_id = job_data["object_id"]
            loai = job_data["type"]
            job_xu_raw = job_data.get("expected_money", 0) 
            job_xu = float(job_xu_raw) if isinstance(job_xu_raw, (int, float, str)) and str(job_xu_raw).replace('.', '', 1).isdigit() else 0.0

            current_profile['status'] = f"{CYAN}RUNNING ({loai}){RESET}"
            current_profile['last_job'] = f"ƒêang th·ª±c hi·ªán {loai} ({job_xu:.0f} xu)..."
            draw_table(working_profiles, current_profile_index, doiacc_limit)
            
            if loai not in lam:
                baoloi(ads_id, object_id, account_id, loai, auth_token)
                current_profile['last_job'] = f"B·ªè qua {loai} (Kh√¥ng ch·ªçn)"
                draw_table(working_profiles, current_profile_index, doiacc_limit)
                time.sleep(1)
                continue

            # Th·ª±c hi·ªán Job IG
            job_result = False
            if loai == "follow":
                job_result = handle_follow_job(cookies, object_id)
            elif loai == "like":
                # ... (logic l·∫•y media_id)
                 object_data = job_data.get("object_data", {})
                 media_id = None
                 if isinstance(object_data, dict):
                    media_id = object_data.get("pk")
                 elif isinstance(object_data, str) and object_data.isdigit():
                    media_id = object_data
                 
                 if media_id:
                      job_result = handle_like_job(cookies, media_id, link)
                 else:
                      job_result = False
            
            success = job_result is True

            if not success:
                current_profile['fail_count'] += 1
                current_profile['last_run'] = get_current_time_str()
                baoloi(ads_id, object_id, account_id, loai, auth_token)
                
                fail_type = "IG"
                if job_result == "400":
                    fail_type = "400 (Cookies Die/Checkpoint)"
                    write_log(f"ACC {current_username}: Th·∫•t b·∫°i {loai}. M√£ 400 IG. Cookies Die?", "CRITICAL")
                else:
                     write_log(f"ACC {current_username}: Th·∫•t b·∫°i {loai} ({fail_type}).", "ERROR")
                
                current_profile['status'] = f"{RED}FAIL ({fail_type}){RESET}"
                current_profile['last_job'] = f"Th·∫•t b·∫°i {loai}. Fail: {current_profile['fail_count']}/{doiacc_limit}"
                draw_table(working_profiles, current_profile_index, doiacc_limit)
                
                sleep_time = 5 if job_result == "400" else 3 
                time.sleep(sleep_time)
                save_state(working_profiles) 
                continue
            
            # N·∫øu th√†nh c√¥ng
            current_profile['fail_count'] = 0
            
            # Delay L√ÄM JOB
            current_profile['last_job'] = f"Ch·ªù DELAY {delay}s ƒë·ªÉ nh·∫≠n Xu..." 
            draw_table(working_profiles, current_profile_index, doiacc_limit)
            
            start_delay_time = time.time()
            while (time.time() - start_delay_time) < delay:
                remaining_time = int(delay - (time.time() - start_delay_time))
                print(f"{CYAN}--- ACC {current_username} DELAY: {YELLOW}{remaining_time}s{CYAN} ---{RESET}", end='\r') 
                time.sleep(1)
            print(" " * 60, end='\r') 

            # Nh·∫≠n Ti·ªÅn
            ok = False
            max_check = 2 if lannhan == "y" else 1 
            
            for checklan in range(1, max_check + 1):
                current_profile['status'] = f"{YELLOW}NH·∫¨N XU (L·∫ßn {checklan}){RESET}"
                current_profile['last_job'] = f"ƒêang g·ª≠i y√™u c·∫ßu nh·∫≠n ti·ªÅn {loai}..."
                draw_table(working_profiles, current_profile_index, doiacc_limit)

                nhantien = hoanthanh(ads_id, account_id, auth_token)
                
                if not isinstance(nhantien, dict) or nhantien.get('status') != 200:
                    time.sleep(1)
                    continue
                    
                ok = True
                current_profile['success_count'] += 1
                
                xu_nhan_raw = nhantien.get('data', {}).get('xu', 0)
                xu_nhan_value = float(xu_nhan_raw) if isinstance(xu_nhan_raw, (int, float, str)) and str(xu_nhan_raw).replace('.', '', 1).isdigit() else 0.0
                    
                if xu_nhan_value > 0:
                    current_profile['total_earn'] += xu_nhan_value
                
                current_profile['last_run'] = get_current_time_str()
                current_profile['status'] = f"{GREEN}SUCCESS{RESET}"
                current_profile['last_job'] = f"‚úî Nh·∫≠n {xu_nhan_raw} xu! (T·ªïng: {current_profile['total_earn']:.0f})"
                
                # FIX: V·∫º L·∫†I B·∫¢NG V√Ä IN TH√îNG B√ÅO X√ÅC NH·∫¨N R√ï R√ÄNG TR∆Ø·ªöC KHI SLEEP 4 GI√ÇY
                draw_table(working_profiles, current_profile_index, doiacc_limit) 
                
                print(f"{GREEN}[‚úî] ACC {current_username}: Nh·∫≠n th√†nh c√¥ng {xu_nhan_raw} xu! (T·ªïng: {current_profile['total_earn']:.0f}){RESET}")
                
                write_log(f"ACC {current_username}: Ho√†n th√†nh {loai} - Nh·∫≠n {xu_nhan_raw} xu. T·ªïng: {current_profile['total_earn']:.0f} xu.", "SUCCESS")
                time.sleep(4) # Gi·ªØ m√†n h√¨nh ·ªïn ƒë·ªãnh 4 gi√¢y
                save_state(working_profiles) 
                break 

            if not ok:
                current_profile['fail_count'] += 1 
                current_profile['last_run'] = get_current_time_str()
                current_profile['status'] = f"{RED}FAIL (XU){RESET}"
                baoloi(ads_id, object_id, account_id, loai, auth_token) 
                current_profile['last_job'] = "Nh·∫≠n ti·ªÅn FAIL. B√°o l·ªói"
                draw_table(working_profiles, current_profile_index, doiacc_limit)
                write_log(f"ACC {current_username}: Th·∫•t b·∫°i nh·∫≠n ti·ªÅn job {ads_id}. ƒê√£ b√°o l·ªói.", "ERROR")
                time.sleep(2)
                save_state(working_profiles) 
                continue
            
            # Chuy·ªÉn acc ti·∫øp theo
            current_profile_index = (current_profile_index + 1) % num_profiles
                
        
    except KeyboardInterrupt:
        # X·ª≠ l√Ω khi d·ª´ng
        total_earn_final = sum(p['total_earn'] for p in working_profiles)
        print(f"\n{'‚ïê'*70}")
        print(f"{YELLOW}[!] Ch∆∞∆°ng tr√¨nh ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng. T·ªïng Xu Ki·∫øm ƒê∆∞·ª£c: {GREEN}{total_earn_final:.0f}{RESET} xu")
        print(f"{'‚ïê'*70}")
        
        save_state(working_profiles) # L∆∞u tr·∫°ng th√°i cu·ªëi c√πng
        write_log(f"Ch∆∞∆°ng tr√¨nh d·ª´ng. T·ªïng Xu Ki·∫øm ƒê∆∞·ª£c: {total_earn_final:.0f} xu.", "EXIT")
        
    except Exception as e:
        write_log(f"L·ªñI NGHI√äM TR·ªåNG (H·ªá th·ªëng): {e}", "CRITICAL")
        if working_profiles:
            current_profile = working_profiles[current_profile_index]
            current_profile['status'] = f"{RED}L·ªñI H·ªÜ TH·ªêNG{RESET}"
            current_profile['last_job'] = f"L·ªói: {str(e)[:20]}. Chuy·ªÉn acc..."
            draw_table(working_profiles, current_profile_index, doiacc_limit)
            save_state(working_profiles)
        print(f"\n{RED}L·ªñI NGHI√äM TR·ªåNG (H·ªá th·ªëng): {e}{RESET}")
        
if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"\n{RED}L·ªñI KH·ªûI ƒê·ªòNG CH∆Ø∆†NG TR√åNH: {e}{RESET}")
        # ... (c√°c h√†m v√† logic k·∫øt th√∫c t·∫°i ƒë√¢y)
# ...

# --- H√ÄM KH·ªûI ƒê·ªòNG C·ª¶A MODULE (B·∫ÆT BU·ªòC CHO TOOL MENU) ---

def run():
    """
    ƒêi·ªÉm kh·ªüi ƒë·ªông ch√≠nh, ƒë∆∞·ª£c g·ªçi b·ªüi tool menu.
    G·ªçi h√†m main() ch·ª©a to√†n b·ªô logic ch·∫°y.
    """
    main()

# ƒê·∫£m b·∫£o l·ªánh ch·∫°y khi file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if __name__ == '__main__':
    run()
